<?xml version="1.0" encoding="UTF-8" ?>
<xamlControls 
  xmlns:x="http://www.sitecore.net/xaml"
  xmlns:ajax="http://www.sitecore.net/ajax"
  xmlns:javascript="http://www.sitecore.net/javascript"
  xmlns:rest="http://www.sitecore.net/rest"
  xmlns:r="http://www.sitecore.net/renderings"
  xmlns:xmlcontrol="http://www.sitecore.net/xmlcontrols"
  xmlns:p="http://schemas.sitecore.net/Visual-Studio-Intellisense"
  xmlns:asp="http://www.sitecore.net/microsoft/webcontrols"
  xmlns:html="http://www.sitecore.net/microsoft/htmlcontrols"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <Sitecore.Shell.Applications.Security.EditManagedDomains x:inherits="Sitecore.Shell.Applications.Security.EditManagedDomains.EditManagedDomainsPage,Sitecore.Client">
    <Sitecore.Controls.DialogPage Header="Edit Managed Domains" Icon="People/32x32/user1_lock.png" Text="Specify which domains the user can administrate." runat="server">
      <x:register assembly="ComponentArt.Web.UI" namespace="ComponentArt.Web.UI"/>

      <Stylesheet Src="Grid.css" DeviceDependant="true" runat="server" />

      <Script type="text/javascript" language="javascript" runat="server" x:placeholder="Scripts">
        <![CDATA[
        function getSelected() {
          var selected = $$(".edit-managed-domains-selected-domains").first();
          if (!selected) {
            console.error("selected options not found");
          }

          return selected;
        }
        
        function onDoubleClick() {
          scAdd();
        }
        
        function onSelectedDoubleClick() {
          scRemove();
        }
        
        function scAdd() {
          var selectedOptions = getSelected();
          var selectedDomains = Domains.getSelectedItems();
          
          if (selectedDomains.length == 0) {
            alert(scForm.translate("Please select a domain"));
            return;
          }

          var added = false;

          selectedDomains.each(function(domain) {
            var domainName = domain.Id.decodeId();
            
            if (domainExists(domainName)) {
              foundExisting = true;
            }
            else {
              var opt = document.createElement("OPTION");              
              selectedOptions.appendChild(opt);              
              opt.innerHTML = domainName;
              added = true;
            }
          });
          
          if (!added) {
            alert(scForm.translate("The domains are already assigned to the user"));
          }
          
          update();
          return false;
        }
        
        function scRemove() {
          var selected = getSelected();
          var newIndex = -1;
          var removed = false;
          
          $A(selected.options).each(function(option, index) {
            if (option.selected) {
              $(option).remove();
              removed = true;
              
              if (newIndex < 0) {
                newIndex = index - 1;
              }
            }
          });
          
          if (!removed) {
            alert(scForm.translate("Please select a domain"));
            return;
          }
          
          update();
          
          var options = $A(selected.options);
          
          if (newIndex < 0) {
            console.warn('newIndex is negative: %s', newIndex);
          }
          
          if (options.length > 0) {
            if (options.length > newIndex) {
              options[newIndex].selected = true;
            }
            else {
              options[options.length - 1].selected = true;
            }
          }
        }
        
        function domainExists(domainName) {
          var selected = getSelected();
          
          return $A(selected.options).find(function(option) {
            return option.innerHTML == domainName;
          });
        }
        
        function update() {
          var selected = getSelected();
          var selected = $A(selected.options).inject("", function(acc, option) { return acc + "|" + option.innerHTML; });
          $("SelectedDomainsHolder").value = selected;
        
          if (typeof(Domains) != "undefined") {
            Domains.scHandler.update();
          }
        }
        
        Event.observe(window, "load", update);
        
        setInterval(function () {
         var searchBox = document.querySelector("[id$=searchBox]");
         if (searchBox && searchBox.value.indexOf('\"') != -1) {
           searchBox.value = searchBox.value.replace(/"/g, "");
         };
        }, 50);
        
        var timer = setInterval(adjustHeight, 10);
        
        function adjustHeight() {
          if (window.Domains && Domains.Loaded) {
              clearInterval(timer);
              scForm.autoIncreaseModalDialogHeight();
          }
        }
      ]]>
      </Script>

      <style>
        .GridGroupingNotificationm {
          display: none;
        }
        
        .editManagedDomainsContainer {
          margin: 5px 10px;
          overflow: auto;
        }
        
        .Grid {
          height: auto !important;
          width:100% !important;
        }
        
        .Row *, .SelectedRow *, .HeadingRow * {
          width: auto !important;
        }

        .scAddRemoveButtonsContainer {
          padding-bottom: 5px;
        }

      </style>

      <AjaxScriptManager runat="server"/>
      <ContinuationManager runat="server" />

      <input id="SelectedDomainsHolder" type="hidden" />

      <Literal class="scFieldLabel sc-text-bold" Text="Selected Domains:" runat="server" />
      <html:HtmlSelect class="edit-managed-domains-selected-domains" ID="SelectedDomains" Size="8" Multiple="true" ondblclick="javascript:onSelectedDoubleClick();" runat="server"/>

      <div class="scAddRemoveButtonsContainer">
        <html:HtmlButton ID="Add" type="button" class="scButton" javascript:Click="return scAdd()" runat="server">
          <Literal Text="Add" runat="server" />
        </html:HtmlButton>
        <html:HtmlButton ID="Remove" type="button" class="scButton" javascript:Click="return scRemove()" runat="server">
          <Literal Text="Remove" runat="server" />
        </html:HtmlButton>
      </div>

      <Literal class="scFieldLabel sc-text-bold" Text="Available Domains:" runat="server" />
      <Border runat="server" id="DomainsPanel">
        <Grid id="Domains"
              RunningMode="Callback"
              CssClass="Grid"

              ShowHeader="true"
              HeaderCssClass="GridHeader"
              AutoFocusSearchBox="false"
            
              FooterCssClass="GridFooter"

              GroupByText = ""
              GroupingNotificationText = ""
              GroupByCssClass="GroupByCell"
              GroupByTextCssClass="GroupByText"
              GroupBySortAscendingImageUrl="group_asc.gif"
              GroupBySortDescendingImageUrl="group_desc.gif"
              GroupBySortImageWidth="10"
              GroupBySortImageHeight="10"

              GroupingNotificationTextCssClass="GridHeaderText GridGroupingNotification"
              GroupingPageSize="5"
            
              PagerStyle="Slider"
              PagerTextCssClass="GridFooterText"
              PagerButtonHoverEnabled="True"
              PagerImagesFolderUrl="/sitecore/shell/themes/standard/componentart/grid/pager/"
            
              ShowSearchBox="true"
              SearchTextCssClass="GridHeaderText scTextAlignRight "
              SearchBoxCssClass="SearchBox"
      	    
              SliderHeight="20"
              SliderWidth="150"
              SliderGripWidth="24"
              SliderPopupOffsetX="20"
              SliderPopupClientTemplateId="SliderTemplate"
            
              TreeLineImagesFolderUrl="/sitecore/shell/themes/standard/componentart/grid/lines/"
              TreeLineImageWidth="22"
              TreeLineImageHeight="19"
            
              PreExpandOnGroup="false"
              ImagesBaseUrl="/sitecore/shell/themes/standard/componentart/grid/"
              IndentCellWidth="22"

              LoadingPanelClientTemplateId="LoadingFeedbackTemplate"
              LoadingPanelPosition="MiddleCenter"
            
              Width="100%" Height="100%" runat="server">

          <Levels>
            <GridLevel
              DataKeyField="scGridID"
              ShowTableHeading="false"
              ShowSelectorCells="false"
              RowCssClass="Row"
              ColumnReorderIndicatorImageUrl="reorder.gif"
              DataCellCssClass="DataCell"
              HeadingCellCssClass="HeadingCell"
              HeadingCellHoverCssClass="HeadingCellHover"
              HeadingCellActiveCssClass="HeadingCellActive"
              HeadingRowCssClass="HeadingRow"
              HeadingTextCssClass="HeadingCellText"
              SelectedRowCssClass="SelectedRow"
              GroupHeadingCssClass="GroupHeading"
              SortAscendingImageUrl="asc.gif"
              SortDescendingImageUrl="desc.gif"
              SortImageWidth="13"
              SortImageHeight="13" runat="server">
              <Columns>
                <GridColumn DataField="scGridID" Visible="false" runat="server" />
                <GridColumn DataField="Name" AllowSorting="false" IsSearchable="true" AllowGrouping="false" SortedDataCellCssClass="SortedDataCell" HeadingText="Domain" runat="server" />
              </Columns>
            </GridLevel>
          </Levels>

          <ClientTemplates>
            <ClientTemplate Id="LoadingFeedbackTemplate" runat="server">
              <table cellspacing="0" cellpadding="0" border="0">
                <tr>
                  <td style="font-size:10px;">
                    <Literal Text="Loading..." runat="server" />;
                  </td>
                  <td>
                    <img src="/sitecore/shell/themes/standard/componentart/grid/spinner.gif" width="16" height="16" border="0" />
                  </td>
                </tr>
              </table>
            </ClientTemplate>

            <ClientTemplate Id="SliderTemplate" runat="server">
              <div class="SliderPopup">
                ## DataItem.PageIndex + 1 ## / ## Domains.PageCount ##
              </div>
            </ClientTemplate>
          </ClientTemplates>
        </Grid>
      </Border>


    </Sitecore.Controls.DialogPage>
  </Sitecore.Shell.Applications.Security.EditManagedDomains>

</xamlControls>
