@using System.Web.Mvc.Html
@using Sitecore
@using Sitecore.ExperienceAnalytics.Client
@using Sitecore.ExperienceAnalytics.Client.Mvc
@using Sitecore.Mvc
@using Sitecore.Web.UI.Controls.Common.ProgressIndicators
@using Sitecore.Web.UI.Controls.Common.Renderings
@using Sitecore.Web.UI.Controls.Common.Texts
@using UserControl = Sitecore.Web.UI.Controls.Common.UserControls.UserControl
@model Sitecore.ExperienceAnalytics.Client.Mvc.Presentation.ExperienceAnalyticsKpiChartViewModel

@EmbedChart(Model.Control)

@Html.Partial("/sitecore/shell/client/Applications/ExperienceAnalytics/Common/Layouts/Renderings/Shared/_DvcWrapper.cshtml", Model)

@helper EmbedChart(UserControl rendering)
{
    var renderingControlId = rendering.ControlId;
    var helper = new RenderingHelper(Html.HtmlHelper(), renderingControlId);

    var bindingTitle = "{Binding " + renderingControlId + ".title}";

    helper.MakeAdvancedExpander("KpiChart", renderingControlId + "Wrapper", bindingTitle, false, entry =>
    {
        helper.MakeDataProvider("DataProvider", entry, Model.DataUrl ?? string.Empty, ".Body");
        if (Model.IsValid == false)
        {
            helper.DisplayConfigurationError("KpiChart", entry, ".Body");
            rendering.Attributes["data-sc-configurationerror"] = "true";
        }
        else
        {
            helper.MakeRow("DataPanel", entry, true, row =>
                {
                    var metricIds = Model.Control.GetString("Metrics").Split(new[] { '|' }, StringSplitOptions.RemoveEmptyEntries).ToList();
                    foreach (var metricId in metricIds)
                    {
                        var metricItem = helper.GetMetric(metricId);
                        var numberScaleItem = helper.GetNumberScaleItem(metricItem["NumberScale"]);
                        var metricName = metricItem["dataField"];
                        helper.MakeColumn("col" + metricName, row, 3, col =>
                            {
                                helper.MakeRow("titleRow" + metricName, col, false, titleRow =>
                                    {
                                        helper.MakeColumn("titleCol" + metricName, titleRow, 12, ContentAlignment.Center, titleCol =>
                                            {
                                                helper.MakeText("name" + metricName, titleCol, metricItem.DisplayName, TextType.Title);
                                            });
                                    });
                                helper.MakeRow("valueRow" + metricName, col, true, PaddingType.Bottom, valueRow =>
                                    {
                                        helper.MakeColumn("valueCol" + metricName, valueRow, 12, ContentAlignment.Center, valueCol =>
                                            {
                                                helper.MakeText("value" + metricName, valueCol, "--", TextType.LargeValue);
                                            });
                                    });
                            });
                    }
                }, ".Body");

            helper.MakeRow("NoDataPanel", entry, false, row =>
                {
                    helper.MakeColumn("col", row, 12, ContentAlignment.Center, col =>
                        {
                            helper.MakeText("NoDataText", col, string.Empty, TextType.Text);
                        });
                }, ".Body");
        }
    });
}

@this.Html.Sitecore().Controls().ProgressIndicator(Model.Control.ControlId + "ProgressIndicator", false, new { TargetControl = Model.Control.ControlId + "KpiChart" })